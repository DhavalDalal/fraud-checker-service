{
	"openapi": "3.0.1",
	"info": {
		"title": "Validation APIs on Fraud Checker Service",
		"description": "1. Validate Request Parameter.\n2. Validate Header Parameter.\n3. Validate Header Parameter Using POST.\n4. Validate Path Variable.",
		"contact": {
			"name": "Dhaval Dalal",
			"url": "https://github.com/DhavalDalal/fraud-checker-service",
			"email": "dhaval@softwareartisan.com"
		},
		"license": {
			"name": "Copyleft License",
			"url": "https://www.gnu.org/licenses/gpl-3.0.html"
		},
		"version": "v1.0"
	},
	"servers": [
		{
			"url": "http://localhost:9001",
			"description": "Generated server url"
		}
	],
	"security": [
		{
			"bearerAuth": [

			]
		}
	],
	"tags": [
		{
			"name": "Fraud Check Controller",
			"description": "Checks for Credit Card Frauds using CVV and Address Check."
		}
	],
	"paths": {
		"/validateHeaderParameterUsingPost": {
			"post": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Header Parameter Via Post",
				"operationId": "validateHeaderParameterUsingPost",
				"parameters": [
					{
						"name": "param",
						"in": "header",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FraudCheckPayload"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Validated Request Parameter Using Post",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					}
				}
			}
		},
		"/validateRequestParameter": {
			"get": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Request Parameter",
				"operationId": "validateRequestParameter",
				"parameters": [
					{
						"name": "param",
						"in": "query",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Validated Request Parameter",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					}
				}
			}
		},
		"/validatePathVariable/{id}": {
			"get": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Path Variable",
				"operationId": "validatePathVariable",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						},
						"example": 1
					}
				],
				"responses": {
					"200": {
						"description": "Validated Path Variable",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					}
				}
			}
		},
		"/validateHeaderParameter": {
			"get": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Header Parameter",
				"operationId": "validateHeaderParameter",
				"parameters": [
					{
						"name": "param",
						"in": "header",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Validated Header Parameter",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"ValidationError": {
				"type": "object",
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			},
			"ValidationErrorsResponse": {
				"type": "object",
				"properties": {
					"validationErrors": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ValidationError"
						}
					}
				}
			},
			"CreditCard": {
				"required": [
					"cvv",
					"holderName",
					"issuingBank",
					"number",
					"validUntil"
				],
				"type": "object",
				"properties": {
					"number": {
						"maxLength": 19,
						"minLength": 16,
						"type": "string",
						"description": "Card Number - Must be between 16 and 19 digits.  It can contain non-digit characters like SPACE or a dash '-'",
						"example": "4485-2847-2013-4093"
					},
					"holderName": {
						"type": "string",
						"description": "Card Holder name",
						"example": "TestCard Holder Name"
					},
					"issuingBank": {
						"type": "string",
						"description": "Issuing of the Card",
						"example": "Test Bank"
					},
					"validUntil": {
						"type": "string",
						"description": "Expiry Date of the Card",
						"format": "date-time"
					},
					"cvv": {
						"maxLength": 3,
						"minLength": 3,
						"type": "integer",
						"description": "Card Verification Value - Must be 3 digits",
						"format": "int32",
						"example": 123
					}
				}
			},
			"FraudCheckPayload": {
				"required": [
					"charge",
					"creditCard"
				],
				"type": "object",
				"properties": {
					"creditCard": {
						"$ref": "#/components/schemas/CreditCard"
					},
					"charge": {
						"$ref": "#/components/schemas/Money"
					}
				}
			},
			"Money": {
				"required": [
					"amount",
					"currency"
				],
				"type": "object",
				"properties": {
					"currency": {
						"type": "string",
						"description": "Currency of the transaction",
						"example": "INR"
					},
					"amount": {
						"type": "number",
						"description": "Amount of the transaction",
						"format": "double",
						"example": 1234.56
					}
				}
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}