// 20240311192743
// http://localhost:9001/api-docs

{
	"openapi": "3.0.1",
	"info": {
		"title": "Fraud Checker Service APIs",
		"description": "Checks for Credit Card Frauds.",
		"contact": {
			"name": "Dhaval Dalal",
			"url": "https://github.com/DhavalDalal/fraud-checker-service",
			"email": "dhaval@softwareartisan.com"
		},
		"license": {
			"name": "Copyleft License",
			"url": "https://www.gnu.org/licenses/gpl-3.0.html"
		},
		"version": "v1.0"
	},
	"servers": [
		{
			"url": "http://localhost:9001",
			"description": "Generated server url"
		}
	],
	"security": [
		{
			"bearerAuth": [

			]
		}
	],
	"tags": [
		{
			"name": "Fraud Check Controller",
			"description": "Checks for Credit Card Frauds using CVV and Address Check."
		},
		{
			"name": "Test Setup Controller",
			"description": "Sets up Routing to Real or Stubbed Service for Fraud Checking with various parameters"
		}
	],
	"paths": {
		"/validateHeaderParameterUsingPost": {
			"post": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Header Parameter Via Post",
				"operationId": "validateHeaderParameterUsingPost",
				"parameters": [
					{
						"name": "param",
						"in": "header",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FraudCheckPayload"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Validated Request Parameter Using Post",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/setup/stubFor/check": {
			"post": {
				"tags": [
					"Test Setup Controller"
				],
				"description": "Stub Fraud Check payload request and its corresponding Fraud Status response.",
				"operationId": "stub",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FraudCheckStub"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/check": {
			"post": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Check possibility of a fradulent transaction and return a status to the caller.",
				"operationId": "checkFraud",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FraudCheckPayload"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Got Fraud Status for the check",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FraudStatus"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FraudStatus"
								}
							}
						}
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/validateRequestParameter": {
			"get": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Request Parameter",
				"operationId": "validateRequestParameter",
				"parameters": [
					{
						"name": "param",
						"in": "query",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Validated Request Parameter",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/validatePathVariable/{id}": {
			"get": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Path Variable",
				"operationId": "validatePathVariable",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						},
						"example": 1
					}
				],
				"responses": {
					"200": {
						"description": "Validated Path Variable",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/validateHeaderParameter": {
			"get": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Validate Header Parameter",
				"operationId": "validateHeaderParameter",
				"parameters": [
					{
						"name": "param",
						"in": "header",
						"description": "Value must be between 5 and 9999 (inclusive)",
						"required": true,
						"schema": {
							"maximum": 9999,
							"minimum": 5,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Validated Header Parameter",
						"content": {
							"text/plain": {

							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/setup/stubbingFor/check": {
			"get": {
				"tags": [
					"Test Setup Controller"
				],
				"description": "Switch the routing of request to Stub or Real Service",
				"operationId": "turnStubbingForFraudCheck",
				"parameters": [
					{
						"name": "on",
						"in": "query",
						"description": "true for routing requests to stub, false to route request to real service.",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/setup/ping": {
			"get": {
				"tags": [
					"Test Setup Controller"
				],
				"description": "Am I alive?",
				"operationId": "pong",
				"responses": {
					"200": {
						"description": "Got Health status",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/setup/getStubs": {
			"get": {
				"tags": [
					"Test Setup Controller"
				],
				"description": "Get All the set stubs",
				"operationId": "stubs",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Stubs"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/setup/fraudCheckDelay": {
			"get": {
				"tags": [
					"Test Setup Controller"
				],
				"description": "Setup delay time in millis for the response to be sent back for a fraud check request",
				"operationId": "fraudCheckDelay",
				"parameters": [
					{
						"name": "respondIn",
						"in": "query",
						"description": "An integer value, 0 is permissible for no delay",
						"required": true,
						"schema": {
							"maximum": 99999,
							"minimum": 0,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		},
		"/ping": {
			"get": {
				"tags": [
					"Fraud Check Controller"
				],
				"summary": "Am I alive?",
				"operationId": "pong_1",
				"responses": {
					"200": {
						"description": "Got Health status",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorsResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"404": {
						"description": "Not Found!",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"406": {
						"description": "Not Acceptable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					},
					"429": {
						"description": "Too Many Requests"
					},
					"default": {
						"description": "unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"ValidationError": {
				"type": "object",
				"properties": {
					"fieldName": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"additionalProperties": false
			},
			"ValidationErrorsResponse": {
				"type": "object",
				"properties": {
					"validationErrors": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ValidationError"
						}
					}
				},
				"additionalProperties": false
			},
			"CreditCard": {
				"required": [
					"cvv",
					"holderName",
					"issuingBank",
					"number",
					"validUntil"
				],
				"type": "object",
				"properties": {
					"number": {
						"maxLength": 19,
						"minLength": 16,
						"type": "string",
						"description": "Card Number - Must be between 16 and 19 digits.  It can contain non-digit characters like SPACE or a dash '-'",
						"example": "4485-2847-2013-4093"
					},
					"holderName": {
						"type": "string",
						"description": "Card Holder name",
						"example": "TestCard Holder Name"
					},
					"issuingBank": {
						"type": "string",
						"description": "Issuing of the Card",
						"example": "Test Bank"
					},
					"validUntil": {
						"type": "string",
						"description": "Expiry Date of the Card",
						"format": "date-time"
					},
					"cvv": {
						"maxLength": 3,
						"minLength": 3,
						"type": "integer",
						"description": "Card Verification Value - Must be 3 digits",
						"format": "int32",
						"example": 123
					}
				},
				"additionalProperties": false
			},
			"FraudCheckPayload": {
				"required": [
					"charge",
					"creditCard"
				],
				"type": "object",
				"properties": {
					"creditCard": {
						"$ref": "#/components/schemas/CreditCard"
					},
					"charge": {
						"$ref": "#/components/schemas/Money"
					}
				},
				"additionalProperties": false
			},
			"Money": {
				"required": [
					"amount",
					"currency"
				],
				"type": "object",
				"properties": {
					"currency": {
						"type": "string",
						"description": "Currency of the transaction",
						"example": "INR"
					},
					"amount": {
						"type": "number",
						"description": "Amount of the transaction",
						"format": "double",
						"example": 1234.56
					}
				},
				"additionalProperties": false
			},
			"FraudCheckStub": {
				"type": "object",
				"properties": {
					"request": {
						"$ref": "#/components/schemas/FraudCheckPayload"
					},
					"response": {
						"$ref": "#/components/schemas/FraudStatus"
					}
				},
				"additionalProperties": false
			},
			"FraudStatus": {
				"required": [
					"avStatus",
					"cvvStatus",
					"overall"
				],
				"type": "object",
				"properties": {
					"cvvStatus": {
						"pattern": "pass|fail",
						"type": "string",
						"description": "CVV Status the Card - pass or fail",
						"example": "pass"
					},
					"avStatus": {
						"pattern": "pass|incorrect address",
						"type": "string",
						"description": "Address Verification Status the Card - pass or incorrect address",
						"example": "incorrect address"
					},
					"overall": {
						"pattern": "pass|fail|suspicious",
						"type": "string",
						"description": "Overall Fraud Status - pass or fail or suspicious",
						"example": "suspicious"
					}
				},
				"additionalProperties": false
			},
			"StubProvider": {
				"type": "object",
				"properties": {
					"request": {
						"type": "object"
					},
					"response": {
						"type": "object"
					}
				},
				"additionalProperties": false
			},
			"Stubs": {
				"type": "object",
				"properties": {
					"allStubs": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/StubProvider"
						}
					}
				},
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}