plugins {
	id 'org.springframework.boot' version '2.4.0-M3'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'idea'
	id 'eclipse'
}

group = 'com.tsys'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// For Spring Boot projects this dependency is good enough for Swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testCompile 'org.junit.jupiter:junit-jupiter-api:5.4.2'
	testCompile 'org.junit.jupiter:junit-jupiter-params:5.4.2'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

test {
	useJUnitPlatform()
}

// To reload on changing a static file, we need a way to copy
// the changed files into the classpath of the running app.
task reload(type: Copy) {
	from 'src/main/resources'
	into 'build/resources/main'
	include 'static/**'
	include 'templates/**'
	include 'custom/**'
}

// To pass arguments while running our application using Gradle
// Plugin, we need to configure our bootRun task:
// Usage on command line:
// gradle bootRun -Dserver.port=10001 -DcustomArgument=custom
bootRun {
	systemProperties = System.properties
}